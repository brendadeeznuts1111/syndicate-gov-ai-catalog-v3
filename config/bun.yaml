# bun.yaml - Syndicate GOV Config + API Routing Citadel
catalog:
  react: "18.3.1"
  typescript: "5.0.4"
  zod: "3.24.1"
  uuid: "10.0.0"
  testing:
    jest: 29.6.2
    react-testing-library: 14.0.0
  build:
    esbuild: 0.19.0
workspaces:
  packages:
    - "packages/*"
registry:
  path: ~/.syndicate/registry

# API Routing + OpenAPI Forge v3.1
api:
  basePath: /api
  version: 1.3.0
  openapi:
    output: ./docs/openapi.yaml
    title: Syndicate Dashboard API
    description: Bun-powered, YAML-governed, grep-first REST + WS
    servers:
      - url: https://api.syndicate.gov
        description: Production Vault
      - url: ws://localhost:3003
        description: Local WS Broadcast
  docs:
    enabled: true
    path: /_docs        # Swagger UI
    redoc: /_redoc      # ReDoc (optional)
    openapi: /openapi.yaml
  routes:
    - path: /config/{hash}
      method: GET
      id: get-config-by-hash
      handler: ./routes/config/get-by-hash.ts
      auth: vault
      response:
        200:
          schema: ConfigResponse
          example: { hash: "abc123", data: "!encrypted ${VAULT:api/main}" }
        404: { schema: Error }
      tags: [config, yaml]
      summary: Retrieve interpolated YAML by hash
      sourcemap: true

    - path: /config/store
      method: POST
      id: store-yaml-config
      handler: ./routes/config/store.ts
      auth: csrf+vault
      request:
        schema: StoreRequest
        required: true
      response:
        201: { schema: StoreResponse }
      tags: [config, write]
      summary: Store YAML with auto-interpolation & zstd
      sourcemap: true

    - path: /ws/config-update
      method: WS
      id: ws-live-config
      handler: ./routes/ws/config-broadcast.ts
      auth: csrf
      subprotocol: dashboard-v1.3
      tags: [realtime, ws]
      summary: Live YAML diff stream with permessage-deflate
      sourcemap: true

    - path: /config/validate
      method: POST
      id: validate-yaml-schema
      handler: ./routes/config/validate.ts
      auth: csrf
      request: { schema: YAMLString }
      response:
        200: { schema: ValidationResult }
        400: { schema: ValidationError }
      tags: [config, validate]
      summary: Schema-check YAML before store
      sourcemap: true

    - path: /wand/{action}
      method: GET
      id: wand-admin-actions
      handler: ./routes/wand.ts
      auth: admin
      response:
        200: { schema: WandResponse }
        401: { schema: Error }
        404: { schema: Error }
      tags: [admin, wand]
      summary: Admin wand: reload, diff, rollback
      sourcemap: true

# Enhanced Authentication & Security Configuration
security:
  scanner: "@socketsecurity/bun-security-scanner"
  minimumReleaseAge: 604800
  
  # JWT Cookie Authentication
  jwt:
    enabled: true
    secret: "${JWT_SECRET}"
    algorithm: "HS256"
    expiresIn: "24h"
    refreshExpiresIn: "7d"
    issuer: "citadel.syndicate.gov"
    audience: "citadel-users"
    
  # Secure Cookie Configuration
  cookies:
    secure: "${COOKIE_SECURE:true}"
    httpOnly: true
    sameSite: "strict"
    domain: "${COOKIE_DOMAIN:localhost}"
    path: "/"
    maxAge: 604800  # 7 days
    
  # Google OAuth2 Configuration
  google:
    enabled: true
    clientId: "${GOOGLE_CLIENT_ID}"
    clientSecret: "${GOOGLE_CLIENT_SECRET}"
    redirectUri: "${GOOGLE_REDIRECT_URI:http://localhost:3000/auth/google/callback}"
    scope: ["openid", "profile", "email"]
    
  # Session Management
  session:
    enabled: true
    store: "redis"  # redis, memory, database
    ttl: 86400  # 24 hours
    secret: "${SESSION_SECRET}"
    rolling: true
    saveUninitialized: false
    
  # Multi-Provider Authentication
  providers:
    jwt:
      enabled: true
      priority: 1
      endpoints:
        login: "/api/auth/login"
        refresh: "/api/auth/refresh"
        logout: "/api/auth/logout"
        
    google:
      enabled: true
      priority: 2
      endpoints:
        login: "/api/auth/google"
        callback: "/api/auth/google/callback"
        logout: "/api/auth/google/logout"
        
    basic:
      enabled: false
      priority: 3
      endpoints:
        login: "/api/auth/basic/login"
        
  # CORS Configuration for Auth Endpoints
  cors:
    enabled: true
    origins: 
      - "${FRONTEND_URL:http://localhost:3000}"
      - "${DASHBOARD_URL:http://localhost:3001}"
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowedHeaders: ["Content-Type", "Authorization", "X-Requested-With"]
    credentials: true
    
  # Performance & Network Optimization
  network:
    # DNS Prefetching
    dns:
      prefetch:
        enabled: true
        hosts:
          - "${API_HOST:localhost}"
          - "${REDIS_HOST:localhost}"
          - "accounts.google.com"
          - "oauth2.googleapis.com"
          - "www.googleapis.com"
        ttl: 30000  # 30 seconds
        
      # DNS Caching
      cache:
        enabled: true
        ttl: 30000  # 30 seconds
        maxSize: 1000
        
    # Connection Pooling & Keep-Alive
    connections:
      keepAlive: true
      maxSimultaneous: "${BUN_CONFIG_MAX_HTTP_REQUESTS:256}"
      timeout: 30000
      reuse: true
      
    # Preconnect Configuration
    preconnect:
      enabled: true
      hosts:
        - "${API_URL:http://localhost:8080}"
        - "${REDIS_HOST:localhost}:6379"
        - "https://accounts.google.com"
        - "https://oauth2.googleapis.com"
      startup: true
      
    # Response Buffering
    buffering:
      enabled: true
      maxResponseSize: "10MB"
      compression: true
      compressionTypes: ["text/*", "application/json", "application/xml"]
      
    # Fetch Optimization
    fetch:
      # Data URL Support
      dataUrls:
        enabled: true
        maxSize: "1MB"
        allowedTypes: ["text/plain", "application/json", "image/*"]
        
      # Blob URL Support
      blobUrls:
        enabled: true
        maxSize: "5MB"
        cleanupInterval: 300000  # 5 minutes
        
      # Debugging
      verbose: "${FETCH_VERBOSE:false}"
      
      # Error Handling
      errorHandling:
        rejectUnauthorized: true
        timeout: 30000
        retries: 3
        retryDelay: 1000

# Bun Runtime Configuration
bun:
  # Default CLI Arguments
  options:
    # Development defaults
    development: "--watch --hot --verbose"
    # Production defaults  
    production: "--optimize --minify"
    # Testing defaults
    testing: "--coverage --reporter=verbose"
    
  # Custom User-Agent
  userAgent:
    default: "Citadel/${APP_VERSION:3.0.0} (Bun-${BUN_VERSION:1.3.0})"
    fetch: "Citadel-Fetch/${APP_VERSION:3.0.0}"
    auth: "Citadel-Auth/${APP_VERSION:3.0.0}"
    
  # Preload Scripts
  preload:
    enabled: true
    scripts:
      - "./scripts/preload/setup.ts"
      - "./scripts/preload/database.ts"
      - "./scripts/preload/auth.ts"
    environment: "BUN_INSPECT_PRELOAD"
    
  # SQL Optimization
  sql:
    # PostgreSQL preconnect at startup
    preconnect:
      enabled: true
      databaseUrl: "${DATABASE_URL}"
      flag: "--sql-preconnect"
      
    # Connection pooling
    pool:
      min: 2
      max: 10
      idleTimeout: 30000
      
  # Standalone Executable Control
  standalone:
    # BUN_BE_BUN environment variable for compiled executables
    beBun:
      enabled: true
      description: "Run Bun binary instead of embedded entry point"
      usage: "BUN_BE_BUN=1 ./myapp --version"
      
  # Performance Optimizations
  performance:
    # Memory management
    memory:
      maxHeap: "2GB"
      gcThreshold: 0.8
      
    # Threading
    threads:
      max: "${BUN_MAX_THREADS:4}"
      workerPool: true
      
    # Compilation cache
    cache:
      enabled: true
      directory: "./.bun/cache"
      maxSize: "500MB"
rules:
  header:
    schema:
      scope:
        - GOV
        - SEC
        - OPS
        - ALERT
        - BASH
        - DASHBOARD
        - ETL
      type:
        - RULES
        - SCRIPT
        - CONFIG
        - MULTI-ETL
      variant:
        - EXPANDED
        - COMPACT
        - LIVE
        - DEV
        - TEST
        - DEPRECATED
        - SCRIPT
        - YAML
      id:
        pattern: '^[A-Z]{3,4}-[A-Z0-9-]{4,12}-[0-9]{3}$'
      version:
        semver: '^v[0-9]+\.[0-9]+\.[0-9]+$|^v[0-9]+\.[0-9]+$'
      status:
        - LIVE
        - DEV
        - TEST
        - DEPRECATED
        - REQUIRED
        - STANDARD
        - OPTIONAL
    defaults:
      scope: GOV
      type: RULES
      variant: ''
      version: v2.9
      status: ACTIVE
    grep:
      patterns:
        all-tags: '\[[a-z0-9.-]+\]'
        by-scope: '\[GOV\-[A-Z]+\-[A-Z+\-'
        required-only: '\[.*REQUIRED\]'
      flags:
        - '--type-add'
        - 'sh:*.sh'
        - '--type-add'
        - 'yaml:*.yaml'
        - '--type-add'
        - 'yml:*.yml'
        - '--smart-case'
        - '--hidden'
        - '-g'
        - '!node_modules/**'
        - '-g'
        - '!.git/**'
        - '-g'
        - '!dist/**'
        - '-g'
        - '!.citadel/indexes/.tags.index'
        - '--colors'
        - 'match:fg:green'
        - '--colors'
        - 'line:fg:yellow'
        - '--colors'
        - 'path:fg:blue'
        - '--max-columns'
        - '150'
        - '--max-columns-preview'
      rg-flags: '--type md --no-heading --with-filename --colors match:fg:yellow:style:bold'
  validate:
    hooks:
      - parse-headers: true
      - grep-index: true

# AI Route Suggester Configuration
ai:
  suggester:
    enabled: true
    cron: '0 3 * * *'          # 03:00 UTC – zero-traffic window
    logGlob: ./logs/access.sample.ndjson
    minConfidence: 0.88        # cosine similarity vs existing routes
    maxNewPerRun: 5            # guardrail – no blast radius
    autoPR: true               # opens PR, does NOT merge
    commitMsg: 'feat(ai): suggested routes from ${{ .runId }}'

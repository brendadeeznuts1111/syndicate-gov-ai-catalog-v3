# bun.yaml - Enhanced with Database Integration & Enterprise Features
# [BUN][CONFIG][YAML][BUN-CONFIG-001][v3.0][LIVE]
# Grepable: [bun-config-yaml-bun-config-001-v3-0-live]

# Core Catalog Configuration
catalog:
  react: "18.3.1"
  typescript: "5.0.4"
  zod: "3.24.1"
  uuid: "10.0.0"
  
  # Database Integration
  database:
    bunsql: "1.0.0"
    postgres: "3.4.3"
    redis: "4.6.10"
    sqlite: "3.44.0"
    
# Testing Catalog
catalogs:
  testing:
    jest: 29.6.2
    react-testing-library: 14.0.0
    "@testing-library/jest-dom": 6.1.4
    
  build:
    esbuild: 0.19.0
    "@esbuild-plugins/node-modules-polyfill": 0.2.2
    
  database:
    "@types/pg": 8.10.7
    "@types/redis": 4.0.11
    
# Workspace Configuration
workspaces:
  packages:
    - "packages/*"
    - "tools/*"
    
# Registry Configuration
registry:
  path: "${REGISTRY_PATH:~/.syndicate/registry}"
  
  # Database-Backed Registry
  database:
    enabled: true
    backend: "postgres"
    cache: "redis"
    local: "sqlite"
    
    # Index Configuration
    indexes:
      tags: "./.citadel/indexes/.tags.index"
      packages: "./.citadel/indexes/.packages.index"
      rules: "./.citadel/indexes/.rules.index"
      
# Enhanced Authentication & Security Configuration
security:
  scanner: "@socketsecurity/bun-security-scanner"
  minimumReleaseAge: 604800
  
  # JWT Cookie Authentication
  jwt:
    enabled: true
    secret: "${JWT_SECRET}"
    algorithm: "HS256"
    expiresIn: "24h"
    refreshExpiresIn: "7d"
    issuer: "citadel.syndicate.gov"
    audience: "citadel-users"
    
  # Secure Cookie Configuration
  cookies:
    secure: "${COOKIE_SECURE:true}"
    httpOnly: true
    sameSite: "strict"
    domain: "${COOKIE_DOMAIN:localhost}"
    path: "/"
    maxAge: 604800  # 7 days
    
  # Google OAuth2 Configuration
  google:
    enabled: true
    clientId: "${GOOGLE_CLIENT_ID}"
    clientSecret: "${GOOGLE_CLIENT_SECRET}"
    redirectUri: "${GOOGLE_REDIRECT_URI:http://${HOST:localhost}:${PORT:3000}/auth/google/callback}"
    scope: ["openid", "profile", "email"]
    
  # Session Management with Database
  session:
    enabled: true
    store: "redis"  # redis, memory, database
    ttl: 86400  # 24 hours
    secret: "${SESSION_SECRET}"
    rolling: true
    saveUninitialized: false
    
    # Database Session Storage
    database:
      table: "sessions"
      cleanupInterval: 3600000  # 1 hour
      
  # Multi-Provider Authentication
  providers:
    jwt:
      enabled: true
      priority: 1
      endpoints:
        login: "/api/auth/login"
        refresh: "/api/auth/refresh"
        logout: "/api/auth/logout"
        
    google:
      enabled: true
      priority: 2
      endpoints:
        login: "/api/auth/google"
        callback: "/api/auth/google/callback"
        logout: "/api/auth/google/logout"
        
    basic:
      enabled: false
      priority: 3
      endpoints:
        login: "/api/auth/basic/login"
        
  # CORS Configuration for Auth Endpoints
  cors:
    enabled: true
    origins:
      - "${FRONTEND_URL:http://${HOST:localhost}:${PORT:3000}}"
      - "${DASHBOARD_URL:http://${HOST:localhost}:${DASHBOARD_PORT:3001}}"
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowedHeaders: ["Content-Type", "Authorization", "X-Requested-With"]
    credentials: true
    
  # Performance & Network Optimization
  network:
    # DNS Prefetching
    dns:
      prefetch:
        enabled: true
        hosts:
          - "${API_HOST:localhost}"
          - "${REDIS_HOST:localhost}"
          - "${POSTGRES_HOST:localhost}"
          - "accounts.google.com"
          - "oauth2.googleapis.com"
          - "www.googleapis.com"
        ttl: 30000  # 30 seconds
        
      # DNS Caching
      cache:
        enabled: true
        ttl: 30000  # 30 seconds
        maxSize: 1000
        
    # Connection Pooling & Keep-Alive
    connections:
      keepAlive: true
      maxSimultaneous: "${BUN_CONFIG_MAX_HTTP_REQUESTS:256}"
      timeout: 30000
      reuse: true
      
    # Preconnect Configuration
    preconnect:
      enabled: true
      hosts:
        - "${API_URL:http://${HOST:localhost}:${API_PORT:8080}}"
        - "${REDIS_HOST:localhost}:${REDIS_PORT:6379}"
        - "${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}"
        - "https://accounts.google.com"
        - "https://oauth2.googleapis.com"
      startup: true
      
    # Response Buffering
    buffering:
      enabled: true
      maxResponseSize: "10MB"
      compression: true
      compressionTypes: ["text/*", "application/json", "application/xml"]
      
    # Fetch Optimization
    fetch:
      # Data URL Support
      dataUrls:
        enabled: true
        maxSize: "1MB"
        allowedTypes: ["text/plain", "application/json", "image/*"]
        
      # Blob URL Support
      blobUrls:
        enabled: true
        maxSize: "5MB"
        cleanupInterval: 300000  # 5 minutes
        
      # Debugging
      verbose: "${FETCH_VERBOSE:false}"
      
      # Error Handling
      errorHandling:
        rejectUnauthorized: true
        timeout: 30000
        retries: 3
        retryDelay: 1000

# Bun Runtime Configuration with Database Integration
bun:
  # Default CLI Arguments
  options:
    # Development defaults
    development: "--watch --hot --verbose"
    # Production defaults  
    production: "--optimize --minify"
    # Testing defaults
    testing: "--coverage --reporter=verbose"
    
  # Custom User-Agent with Database Info
  userAgent:
    default: "Citadel/${APP_VERSION:3.0.0} (Bun-${BUN_VERSION:1.3.0}) Database-Enabled"
    fetch: "Citadel-Fetch/${APP_VERSION:3.0.0} (PostgreSQL-Redis-SQLite)"
    auth: "Citadel-Auth/${APP_VERSION:3.0.0} (Secure-Session)"
    
  # Preload Scripts with Database Setup
  preload:
    enabled: true
    scripts:
      - "./scripts/preload/setup.ts"
      - "./scripts/preload/database.ts"
      - "./scripts/preload/auth.ts"
      - "./scripts/preload/bunsql.ts"
    environment: "BUN_INSPECT_PRELOAD"
    
  # SQL Optimization with Bun.SQL
  sql:
    # PostgreSQL preconnect at startup
    preconnect:
      enabled: true
      databaseUrl: "${DATABASE_URL}"
      flag: "--sql-preconnect"
      
    # Connection Pooling
    pool:
      min: 2
      max: 20
      idleTimeout: 30000
      
    # Query Optimization
    optimization:
      preparedStatements: true
      queryCache: true
      indexHints: true
      
    # Database Health Checks
    healthCheck:
      enabled: true
      interval: 30000  # 30 seconds
      
  # Standalone Executable Control
  standalone:
    # BUN_BE_BUN environment variable for compiled executables
    beBun:
      enabled: true
      description: "Run Bun binary instead of embedded entry point"
      usage: "BUN_BE_BUN=1 ./myapp --version"
      
  # Performance Optimizations
  performance:
    # Memory management
    memory:
      maxHeap: "4GB"
      gcThreshold: 0.8
      
    # Threading
    threads:
      max: "${BUN_MAX_THREADS:8}"
      workerPool: true
      
    # Compilation cache
    cache:
      enabled: true
      directory: "./.bun/cache"
      maxSize: "1GB"
      
    # Database Performance
    database:
      queryTimeout: 30000
      connectionTimeout: 10000
      slowQueryThreshold: 1000

# Rules Configuration with Database Integration
rules:
  header:
    schema:
      scope:
        - GOV
        - SEC
        - OPS
        - ALERT
        - BASH
        - DASHBOARD
        - ETL
      type:
        - RULES
        - SCRIPT
        - CONFIG
        - MULTI-ETL
      variant:
        - EXPANDED
        - COMPACT
        - LIVE
        - DEV
        - TEST
        - DEPRECATED
        - SCRIPT
        - YAML
      id:
        pattern: '^[A-Z]{3,4}-[A-Z0-9-]{4,12}-[0-9]{3}$'
      version:
        semver: '^v[0-9]+\.[0-9]+\.[0-9]+$|^v[0-9]+\.[0-9]+$'
      status:
        - LIVE
        - DEV
        - TEST
        - DEPRECATED
        - REQUIRED
        - STANDARD
        - OPTIONAL
    defaults:
      scope: GOV
      type: RULES
      variant: ""
      version: v2.9
      status: ACTIVE
    grep:
      patterns:
        all-tags: '\[[a-z0-9.-]+\]'
        by-scope: '\[GOV\-[A-Z]+\-[A-Z0-9\-]+\]'
        required-only: '\[.*REQUIRED\]'
      flags:
        - '--type-add'
        - 'sh:*.sh'
        - '--type-add'
        - 'yaml:*.yaml'
        - '--type-add'
        - 'yml:*.yml'
        - '--smart-case'
        - '--hidden'
        - '-g'
        - '!node_modules/**'
        - '-g'
        - '!.git/**'
        - '-g'
        - '!dist/**'
        - '-g'
        - '!.citadel/indexes/.tags.index'
        - '--colors'
        - 'match:fg:green'
        - '--colors'
        - 'line:fg:yellow'
        - '--colors'
        - 'path:fg:blue'
        - '--max-columns'
        - '150'
        - '--max-columns-preview'
      rg-flags: '--type md --no-heading --with-filename --colors match:fg:yellow:style:bold'
  validate:
    hooks:
      - parse-headers: true
      - grep-index: true
      - database-sync: true
      
    # Database Validation
    database:
      enabled: true
      schemaValidation: true
      integrityCheck: true
      
# Database Configuration
database:
  # PostgreSQL Configuration
  postgres:
    enabled: true
    url: "${DATABASE_URL:postgresql://localhost:5432/citadel}"
    host: "${POSTGRES_HOST:localhost}"
    port: "${POSTGRES_PORT:5432}"
    database: "${POSTGRES_DATABASE:citadel}"
    username: "${POSTGRES_USER:citadel}"
    password: "${POSTGRES_PASSWORD}"
    
    # Connection Pooling
    pool:
      min: 2
      max: 20
      idleTimeout: 30000
      
  # Redis Configuration
  redis:
    enabled: true
    url: "${REDIS_URL:redis://localhost:6379}"
    host: "${REDIS_HOST:localhost}"
    port: "${REDIS_PORT:6379}"
    password: "${REDIS_PASSWORD:}"
    database: "${REDIS_DB:0}"
    
    # Connection Pooling
    pool:
      min: 1
      max: 10
      timeout: 5000
      
  # SQLite Configuration
  sqlite:
    enabled: true
    path: "${SQLITE_PATH:./.citadel/citadel.db}"
    pool:
      min: 1
      max: 5
      
# AI Configuration
ai:
  enabled: true
  
  # AI Models
  models:
    header:
      enabled: true
      provider: "tensorflow"
      model: "wasm-tensorflow-lite-v3.0"
      accuracy: 0.978
      
    yaml:
      enabled: true
      provider: "openai"
      model: "gpt-4"
      maxTokens: 2000
      
  # AI Operations
  operations:
    generation:
      enabled: true
      cache: true
      timeout: 10000
      
    validation:
      enabled: true
      strict: true
      timeout: 5000

# Monitoring Configuration
monitoring:
  enabled: true
  
  # Metrics Collection
  metrics:
    enabled: true
    interval: 5000  # 5 seconds
    
    # Database Metrics
    database:
      enabled: true
      metrics:
        - "connection_pool_usage"
        - "query_time"
        - "cache_hit_rate"
        
  # Health Checks
  health:
    enabled: true
    endpoint: "/health"
    checks:
      - "database"
      - "redis"
      - "ai"
      - "registry"

# Environment Variables
environment:
  # Required Variables
  required:
    - "DATABASE_URL"
    - "REDIS_URL"
    - "JWT_SECRET"
    - "SESSION_SECRET"
    
  # Optional Variables
  optional:
    - "POSTGRES_HOST"
    - "POSTGRES_PORT"
    - "POSTGRES_DATABASE"
    - "POSTGRES_USER"
    - "POSTGRES_PASSWORD"
    - "REDIS_HOST"
    - "REDIS_PORT"
    - "REDIS_PASSWORD"
    - "REDIS_DB"
    - "SQLITE_PATH"
    - "REGISTRY_PATH"
    - "GOOGLE_CLIENT_ID"
    - "GOOGLE_CLIENT_SECRET"
    - "COOKIE_SECURE"
    - "COOKIE_DOMAIN"
    - "FRONTEND_URL"
    - "DASHBOARD_URL"
    - "API_URL"
    - "BUN_MAX_THREADS"
    - "FETCH_VERBOSE"
